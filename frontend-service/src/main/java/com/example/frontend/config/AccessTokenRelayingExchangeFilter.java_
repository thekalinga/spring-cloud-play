package com.example.frontend.config;

import org.springframework.stereotype.Component;
import org.springframework.web.reactive.function.client.ClientRequest;
import org.springframework.web.reactive.function.client.ClientResponse;
import org.springframework.web.reactive.function.client.ExchangeFilterFunction;
import org.springframework.web.reactive.function.client.ExchangeFunction;
import reactor.core.publisher.Mono;

import static org.springframework.http.HttpHeaders.AUTHORIZATION;


//@Component
// TODO: Use ServerOAuth2AuthorizedClientExchangeFilterFunction instead
public class AccessTokenRelayingExchangeFilter implements ExchangeFilterFunction {
  private final OAuthTokenRefresher oauthTokenRefresher;

  public AccessTokenRelayingExchangeFilter(OAuthTokenRefresher oauthTokenRefresher) {
    this.oauthTokenRefresher = oauthTokenRefresher;
  }

  @Override
  public Mono<ClientResponse> filter(ClientRequest request, ExchangeFunction next) {
    return oauthTokenRefresher.retrieveToken()
        .flatMap(accessToken -> next.exchange(newRequestWithBearerTokenAuthHeader(request, accessToken)));

    //    return modifiedFlow.onErrorResume(throwable -> modifiedFlow); // TODO: this always retries, but change this. Find teh exception thats thrown if token is invalid from downstream
  }

  private static ClientRequest newRequestWithBearerTokenAuthHeader(ClientRequest request, String accessToken) {
    return ClientRequest.from(request).header(AUTHORIZATION, "Bearer " + accessToken).build();
  }

}
