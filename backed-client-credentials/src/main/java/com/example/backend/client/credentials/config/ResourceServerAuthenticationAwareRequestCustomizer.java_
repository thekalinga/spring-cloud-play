package com.example.backend.client.credentials.config;

import org.springframework.boot.web.client.RestTemplateRequestCustomizer;
import org.springframework.http.HttpHeaders;
import org.springframework.http.client.ClientHttpRequest;
import org.springframework.security.oauth2.client.OAuth2AuthorizeRequest;
import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;
import org.springframework.security.oauth2.client.OAuth2AuthorizedClientManager;
import org.springframework.security.oauth2.client.OAuth2AuthorizedClientProvider;
import org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder;
import org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager;
import org.springframework.stereotype.Component;

import java.util.Objects;

import static java.util.Objects.requireNonNull;

@Component
public class ResourceServerAuthenticationAwareRequestCustomizer implements
    RestTemplateRequestCustomizer<ClientHttpRequest> {

  private final OAuth2AuthorizedClientManager authorizedClientManager;

  public ResourceServerAuthenticationAwareRequestCustomizer(
      OAuth2AuthorizedClientManager authorizedClientManager) {
    OAuth2AuthorizedClientProvider authorizedClientProvider = OAuth2AuthorizedClientProviderBuilder
        .builder()
        .clientCredentials((configurer) -> configurer.accessTokenResponseClient(this.accessTokenResponseClient))
        .build();
    // @formatter:on
    DefaultOAuth2AuthorizedClientManager defaultAuthorizedClientManager = new DefaultOAuth2AuthorizedClientManager(
        this.clientRegistrationRepository, this.authorizedClientRepository);
    defaultAuthorizedClientManager.setAuthorizedClientProvider(authorizedClientProvider);
    authorizedClientManager = defaultAuthorizedClientManager;
    this.authorizedClientManager = authorizedClientManager;
  }

  @Override
  public void customize(ClientHttpRequest request) {
    // Build an OAuth2 request for the Okta provider
    OAuth2AuthorizeRequest authorizeRequest = OAuth2AuthorizeRequest.withClientRegistrationId("backend-client-credentials-client")
        .principal("system-account")
        .build();
    final var authorizedClient = authorizedClientManager.authorize(authorizeRequest);
    request.getHeaders().add(HttpHeaders.AUTHORIZATION, "Bearer " + requireNonNull(authorizedClient).getAccessToken());
  }
}
